# =============================================================================
# Importation des biblioth√®ques n√©cessaires
# =============================================================================
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.keys import Keys
import time
import pandas as pd

# =============================================================================
# Configuration du WebDriver et des d√©lais d'attente
# =============================================================================
# Nous configurons le ChromeDriver en mode non-headless afin de visualiser le d√©roulement.
options = webdriver.ChromeOptions()
driver = webdriver.Chrome(options=options)
wait = WebDriverWait(driver, 15)

# =============================================================================
# D√©finition des villes et banques √† rechercher
# =============================================================================
Villes = [
    "AGADIR",
    "AL HOCEIMA",
    "ASILAH",
    "BERKANE",
    "BENI MELLAL",
    "CASABLANCA",
    "EL JADIDA",
    "ESSAOUIRA",
    "ERRACHIDIA",
    "F√àS",
    "GUELMIM",
    "IFRANE",
    "KENITRA",
    "MARRAKECH",
    "M√âKN√àS",
    "M'DIQ",
    "MOHAMMEDIA",
    "NADOR",
    "OUARZAZATE",
    "OUJDA",
    "RABAT",
    "SAFI",
    "SETTAT",
    "SIDI KACEM",
    "TAROUDANT",
    "TAZA",
    "TANGER",
    "T√âMARA",
    "T√âTOUAN",
    "TIZNIT"
]

Banks = [
    "ATTIJARIWAFA BANK",
    "AL BARID BANK",
    "BANQUE POPULAIRE",
    "BANQUE CENTRALE POPULAIRE",
    "BANK OF AFRICA",
    "BMCI",
    "BMCI BANK",         # Banque marocaine pour le commerce et l'industrie
    "CREDIT AGRICOLE",
    "CIH BANK",
    "CREDIT IMMOBILIER ET HOTELIER BANK",
    "Cr√©dit du Maroc",
    "CREDIT DU MAROC",
    "SOCI√âT√â G√âN√âRALE MAROC",
    "BANK ASSAFA",
    "AL AKHDAR BANK",
    "BANK AL KARAM",
    "BANK AL YOUSR",
    "UMNIA BANK",
    "ARAB BANK",
    "BTI BANK",
    "CDG CAPITAL",
    "CFG BANK",
    "CITIBANK MAGHREB",
    "DAR EL AMANE"
]

# Liste qui contiendra l'ensemble des donn√©es collect√©es
all_data = []
data_temp = 1

# =============================================================================
# Boucle principale pour le scraping
# =============================================================================
for ville in Villes:
    for bank in Banks:
        print(f"\nüîç Recherche des agences pour : {bank} √† {ville}")
        # Construire l'URL de recherche sur Google Maps
        search_url = f"https://www.google.com/maps/search/{bank.replace(' ', '+')}+{ville}/"
        driver.get(search_url)
        time.sleep(3)

        # Scrolling dans la liste des agences pour s'assurer que tous les r√©sultats se chargent
        try:
            # CORRECTION: Am√©liorer le scrolling pour charger TOUTES les agences
            prev_agency_count = 0
            scroll_attempts = 0
            max_scroll_attempts = 20
            consecutive_no_change = 0
            
            print("üîÑ D√©but du chargement des agences...")
            
            # Trouver le conteneur scrollable des agences - approche similaire aux avis
            scrollable_container = None
            possible_selectors = [
                "div.m6QErb.DxyBCb.kA9KIf.dS8AEf",  # Conteneur principal avec dS8AEf
                "div.m6QErb.DxyBCb.kA9KIf",         # Conteneur de base
                "div[role='main']",                   # Conteneur principal
                "div.Nv2PK.tH5CWc.THOPZb"           # Autre conteneur possible
            ]
            
            for selector in possible_selectors:
                try:
                    scrollable_container = driver.find_element(By.CSS_SELECTOR, selector)
                    print(f"‚úÖ Conteneur scrollable des agences trouv√© avec : {selector}")
                    break
                except:
                    continue
            
            while scroll_attempts < max_scroll_attempts:
                # Compter les agences actuelles
                current_agencies = driver.find_elements(By.CLASS_NAME, "hfpxzc")
                current_count = len(current_agencies)
                
                if scroll_attempts % 5 == 0:  # Afficher le progr√®s tous les 5 scrolls
                    print(f"üîÑ Scroll {scroll_attempts + 1}: {current_count} agences trouv√©es")
                
                # Si on n'a pas charg√© de nouvelles agences
                if current_count == prev_agency_count:
                    consecutive_no_change += 1
                    # Arr√™ter seulement apr√®s plusieurs tentatives cons√©cutives sans changement
                    if consecutive_no_change >= 5:
                        print(f"‚úÖ Arr√™t du scroll apr√®s {consecutive_no_change} tentatives sans nouvelles agences")
                        break
                else:
                    consecutive_no_change = 0  # Reset du compteur
                    prev_agency_count = current_count
                
                # Approche multiple pour le scroll - comme pour les avis
                if scrollable_container:
                    # M√©thode 1: Scroller dans le conteneur des agences
                    driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", scrollable_container)
                else:
                    # M√©thode 2: Fallback avec scroll g√©n√©ral
                    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                
                # M√©thode 3: Essayer aussi de scroller avec les touches (comme scroll manuel)
                try:
                    if current_agencies:
                        # Simuler un scroll en cliquant sur le dernier √©l√©ment visible puis utiliser les touches
                        last_agency = current_agencies[-1]
                        driver.execute_script("arguments[0].scrollIntoView();", last_agency)
                        time.sleep(1)
                        # Simuler plusieurs appuis sur la touche PAGE_DOWN
                        driver.find_element(By.TAG_NAME, 'body').send_keys(Keys.PAGE_DOWN)
                        driver.find_element(By.TAG_NAME, 'body').send_keys(Keys.PAGE_DOWN)
                except:
                    pass
                
                time.sleep(2)  # D√©lai pour le chargement
                scroll_attempts += 1
                
        except Exception:
            print(f"‚ùå Aucune agence trouv√©e pour {bank} √† {ville}, passage √† la suivante.")
            continue

        # R√©cup√©rer tous les liens des agences APR√àS le scrolling complet
        agency_elements = driver.find_elements(By.CLASS_NAME, "hfpxzc")
        agency_links = [elem.get_attribute("href") for elem in agency_elements]
        print(f"‚úÖ {len(agency_links)} agences trouv√©es pour {bank} √† {ville}")

        # Pour chaque agence trouv√©e, nous extrayons les informations et les avis
        for agency_link in agency_links:
            print(f"\n‚û°Ô∏è Acc√®s √† l'agence : {agency_link}")
            if agency_link and isinstance(agency_link, str) and agency_link.startswith("http"):
                driver.get(agency_link)
                time.sleep(3)

                # R√©cup√©rer l'adresse de l'agence (si disponible)
                try:
                    address_element = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located(
                            (By.CSS_SELECTOR, "div.Io6YTe.fontBodyMedium.kR99db.fdkmkc")
                        )
                    )
                    address = address_element.text.strip()
                except TimeoutException:
                    address = "Non trouv√©e"

                # R√©cup√©rer le nom (branch) de l'agence
                try:
                    bank_name_element = wait.until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "span.a5H0ec"))
                    )
                    branch_name = bank_name_element.text.strip() + " - " + address
                except TimeoutException:
                    branch_name = bank + " - " + address

                # Cliquer sur le bouton "Avis" pour acc√©der aux commentaires
                try:
                    avis_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//*[contains(text(), 'Avis')]")))
                    avis_button.click()
                    time.sleep(3)
                except Exception as e:
                    print(f"‚ùå Impossible de cliquer sur 'Avis' pour cette agence : {e}")
                    continue

                # Attendre le chargement du conteneur d'avis
                try:
                    container = wait.until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "div.jftiEf.fontBodyMedium"))
                    )
                except Exception as e:
                    print(f"‚ùå Conteneur d'avis non trouv√© pour cette agence : {e}")
                    continue

                # CORRECTION: Am√©liorer le scrolling pour charger TOUS les avis
                prev_count = 0
                scroll_attempts = 0
                max_scroll_attempts = 50
                consecutive_no_change = 0
                
                print("üîÑ D√©but du chargement des avis...")
                
                # Trouver le conteneur scrollable des avis
                try:
                    # Plusieurs s√©lecteurs possibles pour le conteneur des avis
                    scrollable_container = None
                    possible_selectors = [
                        "div.m6QErb.DxyBCb.kA9KIf.dS8AEf",  # Conteneur principal des avis
                        "div[role='main']",  # Conteneur principal
                        "div.m6QErb.DxyBCb.kA9KIf"  # Variante du conteneur
                    ]
                    
                    for selector in possible_selectors:
                        try:
                            scrollable_container = driver.find_element(By.CSS_SELECTOR, selector)
                            print(f"‚úÖ Conteneur scrollable trouv√© avec : {selector}")
                            break
                        except:
                            continue
                            
                except Exception as e:
                    print(f"‚ö†Ô∏è Impossible de trouver le conteneur scrollable : {e}")
                    scrollable_container = None
                
                while scroll_attempts < max_scroll_attempts:
                    # R√©cup√®re tous les avis actuellement dans le DOM
                    reviews_elements = driver.find_elements(By.CSS_SELECTOR, "div.jftiEf.fontBodyMedium")
                    current_count = len(reviews_elements)
                    
                    if scroll_attempts % 5 == 0:  # Afficher le progr√®s tous les 5 scrolls
                        print(f"üîÑ Scroll {scroll_attempts + 1}: {current_count} avis charg√©s")
                    
                    # Si on n'a pas charg√© de nouvel avis
                    if current_count == prev_count:
                        consecutive_no_change += 1
                        # Arr√™ter seulement apr√®s plusieurs tentatives cons√©cutives sans changement
                        if consecutive_no_change >= 5:
                            print(f"‚úÖ Arr√™t du scroll apr√®s {consecutive_no_change} tentatives sans nouveaux avis")
                            break
                    else:
                        consecutive_no_change = 0  # Reset du compteur
                        prev_count = current_count
                    
                    # Scroller dans le bon conteneur
                    if scrollable_container:
                        # Scroller dans le conteneur des avis
                        driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", scrollable_container)
                    else:
                        # Fallback: scroller dans la page principale
                        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                    
                    time.sleep(2)  # D√©lai pour le chargement
                    scroll_attempts += 1
            else:
                print(f"‚ùå Lien invalide ignor√© : {agency_link}")

            # Mettre √† jour la liste des avis charg√©s apr√®s le scrolling complet
            reviews_elements = driver.find_elements(By.CSS_SELECTOR, "div.jftiEf.fontBodyMedium")
            print(f"üîç Nombre total d'avis charg√©s pour l'agence : {len(reviews_elements)}")

            # Extraction des avis de l'agence
            for review in reviews_elements:
                try:
                    # Si le texte est tronqu√©, cliquer sur le bouton "plus"
                    try:
                        more_button = review.find_element(By.CSS_SELECTOR, "button.w8nwRe.kyuRq")
                        driver.execute_script("arguments[0].click();", more_button)
                        time.sleep(0.5)
                    except Exception:
                        pass

                    # Extraire le texte de l'avis - Am√©liorer les s√©lecteurs
                    review_text = ""
                    possible_text_selectors = [
                        "span.wiI7pd",
                        "div.MyEned span",
                        "div.jftiEf span",
                        "span[data-expandable-section]"
                    ]
                    
                    for selector in possible_text_selectors:
                        try:
                            review_text = review.find_element(By.CSS_SELECTOR, selector).text.strip()
                            if review_text:  # Si on a trouv√© du texte, on arr√™te
                                break
                        except:
                            continue
                    
                    if not review_text:  # Si aucun texte trouv√©
                        print("‚ö†Ô∏è Texte d'avis non trouv√©, passage au suivant")
                        continue
                    # Extraire la note - Am√©liorer les s√©lecteurs
                    nbr_etoile = "Pas de note"
                    possible_rating_selectors = [
                        "span.kvMYJc",
                        "div[role='img'][aria-label*='√©toile']",
                        "span[aria-label*='√©toile']"
                    ]
                    
                    for selector in possible_rating_selectors:
                        try:
                            nbr_etoile_element = review.find_element(By.CSS_SELECTOR, selector)
                            nbr_etoile = nbr_etoile_element.get_attribute("aria-label")
                            if nbr_etoile:
                                break
                        except:
                            continue
                    # Extraire la date de l'avis - Am√©liorer les s√©lecteurs
                    review_date = "Inconnu"
                    possible_date_selectors = [
                        "span.rsqaWe",
                        "span.DU9Pgb",
                        "div.rsqaWe"
                    ]
                    
                    for selector in possible_date_selectors:
                        try:
                            date_elements = review.find_elements(By.CSS_SELECTOR, selector)
                            if date_elements:
                                review_date = date_elements[0].text.strip()
                                break
                        except:
                            continue

                    # Ajouter les informations de cet avis √† la liste globale
                    all_data.append({
                        "bank_name": bank,
                        "branch_name": branch_name,
                        "location": address,
                        "city": ville,
                        "review_text": review_text,
                        "rating": nbr_etoile,
                        "review_date": review_date
                    })

                    # --- Sauvegarde interm√©diaire tous les 100 avis ---
                    if len(all_data) > (100*data_temp):
                        try:
                            df_temp = pd.DataFrame(all_data)
                            df_temp.to_csv("backup_temp.csv", index=False, encoding="utf-8")
                            print(f"üíæ Sauvegarde interm√©diaire : {len(all_data)} avis sauvegard√©s dans 'backup_temp.csv'")
                            data_temp += 1
                        except Exception as e_save:
                            print(f"‚ö†Ô∏è Impossible de faire la sauvegarde interm√©diaire : {e_save}")
                            data_temp += 1
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors du traitement d'un avis pour cette agence : {e}")

            print(f"‚úÖ Avis extraits pour cette agence : {len(reviews_elements)} avis.")

# =============================================================================
# Fermeture du WebDriver et sauvegarde des donn√©es dans un CSV
# =============================================================================
driver.quit()

df = pd.DataFrame(all_data)

try:
    csv_filename = "avis_banques_Maroc.csv"
    df.to_csv(csv_filename, index=False, encoding="utf-8")
    print(f"‚úÖ Donn√©es sauvegard√©es dans '{csv_filename}'")
except Exception as e1:
    print(f"‚ö†Ô∏è Erreur lors de la premi√®re sauvegarde : {e1}")
    try:
        backup_path = "C:/Users/ayoub/Downloads/voice_conversion_app/avis_banques_Maroc_backup.csv"
        df.to_csv(backup_path, index=False, encoding="utf-8")
        print(f"‚úÖ Donn√©es sauvegard√©es dans le fichier de secours : '{backup_path}'")
    except Exception as e2:
        print(f"‚ùå √âchec de la sauvegarde CSV de secours : {e2}")
        json_path = "avis_banques_Maroc.json"
        df.to_json(json_path, orient="records", force_ascii=False, indent=2)
        print(f"‚úÖ Donn√©es sauvegard√©es en JSON dans '{json_path}'")

print(f"\n‚úÖ Donn√©es enregistr√©es dans '{csv_filename}' ({len(all_data)} avis).")
print("üöÄ Scraping termin√© pour toutes les banques !")
